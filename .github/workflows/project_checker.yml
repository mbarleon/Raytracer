name: project_checker

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

jobs:
  check_program_compilation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3

      - name: Load cached Docker image
        id: load-cache
        uses: actions/cache@v3
        with:
          path: ./epitest-docker.tar
          key: epitest-docker-cache

      - name: Load image if cache hit
        if: steps.load-cache.outputs.cache-hit == 'true'
        run: docker load -i epitest-docker.tar

      - name: Pull and save image if not cached
        if: steps.load-cache.outputs.cache-hit != 'true'
        run: |
          docker pull epitechcontent/epitest-docker
          docker save epitechcontent/epitest-docker -o epitest-docker.tar

      - name: Save Docker image to cache
        if: steps.load-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ./epitest-docker.tar
          key: epitest-docker-cache

      - name: Run build inside Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace epitechcontent/epitest-docker bash -c '
            if [ ! -f "build.sh" ]; then
              echo "::error ::/!\\ WARNING NO build.sh FOUND /!\\"
              exit 1
            else
              echo "::notice::build.sh found."
            fi

            if ./build.sh; then
              echo "::notice file=build.sh::Successfully compiled (./build.sh)."
            else
              echo "::error file=build.sh::/!\\ COMPILATION ERROR (./build.sh)/!\\"
              exit 1
            fi

            executable="${EXECUTABLE_PATH}"
            if [ ! -x "$executable" ]; then
              echo "::error file=$executable::Executable $executable is missing or not executable."
              exit 1
            else
              echo "::notice file=$executable::Executable $executable found and is executable."
            fi

            if ./build.sh && ./build.sh --tests ; then
              echo "::notice file=build.sh::Unit tests successful (./build.sh --tests)."
            else
              echo "::error file=build.sh::/!\\ UNIT TESTS ERROR (./build.sh --tests)/!\\"
              exit 1
            fi
          '
        env:
          EXECUTABLE_PATH: ${{ vars.EXECUTABLE_PATH }}


  push_to_mirror:
    if: github.event_name == 'push'
    needs: check_program_compilation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Mirror to epitech repo
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ vars.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
